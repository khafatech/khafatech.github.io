<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Categorized Abstractions: Posts tagged 'encryption'</title>
  <description>Categorized Abstractions: Posts tagged 'encryption'</description>
  <link>https://blog.khafateh.com/tags/encryption.html</link>
  <lastBuildDate>Mon, 18 Feb 2019 22:33:20 UT</lastBuildDate>
  <pubDate>Mon, 18 Feb 2019 22:33:20 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>An old IDEA</title>
   <link>https://blog.khafateh.com/blog/2019/02/18/an-old-idea/?utm_source=encryption&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-blog-khafateh-com:-blog-2019-02-18-an-old-idea</guid>
   <pubDate>Mon, 18 Feb 2019 22:33:20 UT</pubDate>
   <author>nil</author>
   <description>
&lt;p&gt;Spoiler alert: I didn&amp;rsquo;t find the password.&lt;/p&gt;

&lt;p&gt;Around 2002, I came across a tool that encrypts and decrypts files using the IDEA cipher. &lt;a href="https://en.wikipedia.org/wiki/International_Data_Encryption_Algorithm"&gt;IDEA&lt;/a&gt; was created in 1991 by James Massey Xuejia Lai, and it seems still relatively secure. It&amp;rsquo;s still used in a recent version of opengpg.&lt;/p&gt;

&lt;p&gt;I had encrypted few zip files using this, in 2002 and 2003. (Nothing serious, just wanted to try out encrypting things.) However, I forgot the passwords.&lt;/p&gt;

&lt;p&gt;Looking at the implementation, it says it uses a maximum of 8 characters for a passphrase, which is about half of IDEA&amp;rsquo;s 128-bit keylength (not counting non-ascii characters.)&lt;/p&gt;

&lt;p&gt;It was a tool for DOS in 16-bit mode.&lt;/p&gt;

&lt;p&gt;Given this limitation, is bruteforcing a password possible? If I used only lowercase letters for the password, the number of passwords to try would be &lt;code&gt;26^8 = 208,827,064,576&lt;/code&gt;, or about 200 billion combinations. Alphanumeric combinations would be &lt;code&gt;(26*2 + 10)^8 = 218,340,105,584,896&lt;/code&gt;, or about 218 trillion. Some simple math can lead us to an estimate of the time to go through the search space. It depends on the elements and elements/s.&lt;/p&gt;

&lt;p&gt;One challenge with finding the correct decryption password is there&amp;rsquo;s no easy way of making sure we hae the correct password. The way this idea program worked was to only encrypt/decrypt fixed blocks, with no integrity checking. If we decrypt a file with the wrong password, it would output random data. So one way to find the correct password is to find a pattern in the output if we know what the output would contain. Since it was a zip file, a zip file has a known header in the first block (16 bytes).&lt;/p&gt;

&lt;p&gt;I modified the main file to read words from a wordlist, decrypt the first block, and test if it&amp;rsquo;s a zip header. Instead of parallizing the solution in C, I wrote simple bash scripts to run it parallelly after splitting the wordlist into 4, the number of cores I have. I was able to process 700k passwords/s. I wasn&amp;rsquo;t able to find the password using the wordlists I had. I suppose I need to investigate more techniques and maybe harness my GPU.&lt;/p&gt;

&lt;p&gt;Few more things come to my mind for future work:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Are there any other weaknesses in the implementation?&lt;/li&gt;
 &lt;li&gt;Could this be integrated into the &amp;ldquo;John the Ripper&amp;rdquo; password cracker?&lt;/li&gt;&lt;/ul&gt;

&lt;h3 id="references"&gt;References&lt;/h3&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;a href="https://github.com/quakehead/idea"&gt;The IDEA code that compiles in a modern linux enviornment&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/International_Data_Encryption_Algorithm"&gt;The IDEA algorithm&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description></item></channel></rss>